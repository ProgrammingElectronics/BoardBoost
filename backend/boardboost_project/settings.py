"""
Django settings for boardboost_project project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import environ
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/


env = environ.Env(
    # Set default values
    DEBUG=(bool, False),
    SECRET_KEY=(
        str,
        "django-insecure-t-5q0isfrg-h-9zaus3&nys0)h8bn(ko2_k=jnk4#=)1tptavm",
    ),
    ALLOWED_HOSTS=(list, []),
    APP_DOMAIN=(str, None),
)

try:
    environ.Env.read_env(os.path.join(BASE_DIR, "../.env"))
except Exception:
    # Try one more location that might work in App Platform
    try:
        environ.Env.read_env(os.path.join(BASE_DIR, ".env"))
    except Exception:
        # Continue without .env file in production
        pass

# AI Provider API Keys
OPENAI_API_KEY = env("OPENAI_API_KEY")
ANTHROPIC_API_KEY = env("ANTHROPIC_API_KEY")

# Beta Limit
MAX_BETA_USERS = env("MAX_BETA_USERS", default=2)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env("DEBUG")
SECRET_KEY = env("DJANGO_SECRET_KEY")
# ARDUINO_CREATE_AGENT_PRIVATE_KEY = env("ARDUINO_CREATE_AGENT_PRIVATE_KEY")

# Recaptcha keys
if DEBUG:
    SILENCED_SYSTEM_CHECKS = ["django_recaptcha.recaptcha_test_key_error"]
    RECAPTCHA_PUBLIC_KEY = (
        "6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI"  # Google test key for development
    )
    RECAPTCHA_PRIVATE_KEY = (
        "6LeIxAcTAAAAAGG-vFI1TnRWxMZNFuojJ4WifJWe"  # Google test key for development
    )

else:
    RECAPTCHA_PUBLIC_KEY = env("RECAPTCHA_PUBLIC_KEY", default="")
    RECAPTCHA_PRIVATE_KEY = env("RECAPTCHA_PRIVATE_KEY", default="")


# Fix ALLOWED_HOSTS to handle Digital Ocean App Platform
ALLOWED_HOSTS = env.list("ALLOWED_HOSTS", default=[])

# Always include basic localhost entries
if "localhost" not in ALLOWED_HOSTS:
    ALLOWED_HOSTS.append("localhost")
if "127.0.0.1" not in ALLOWED_HOSTS:
    ALLOWED_HOSTS.append("127.0.0.1")

# Add App Platform domain if it exists
app_domain = env("APP_DOMAIN", default=None)
if app_domain:
    ALLOWED_HOSTS.append(app_domain)

# Add the known Digital Ocean domain
ALLOWED_HOSTS.append("boardboost-fb5ug.ondigitalocean.app")

# Add CSRF trusted origins support for HTTPS
CSRF_TRUSTED_ORIGINS = []
for host in ALLOWED_HOSTS:
    if host not in ["localhost", "127.0.0.1"]:
        CSRF_TRUSTED_ORIGINS.append(f"https://{host}")


LOGIN_URL = "/login/"
LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "login"  # Redirect to login page after logout

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.humanize",
    "chat",
    "rest_framework",
    "django_recaptcha",
    "corsheaders",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "chat.middleware.BetaRegistrationMiddleware",
]

# Allow all origins just for the Arduino API endpoint
CORS_ALLOWED_ORIGINS = [
    "http://localhost:8991",
    "http://localhost:8990",
]

CORS_ALLOW_CREDENTIALS = True

ROOT_URLCONF = "boardboost_project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "boardboost_project.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases


# Database configuration
if env("DATABASE_URL", default=None):
    # If DATABASE_URL is provided, use it (Digital Ocean PostgreSQL)
    DATABASES = {
        "default": env.db(),
    }
else:
    # Fallback to SQLite if no DATABASE_URL is provided
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, "chat", "static"),
# ]
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
