"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _operators = require("rxjs/operators");
var _daemon = _interopRequireDefault(require("./daemon"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); } /*
* Copyright 2022 ARDUINO SA (http://www.arduino.cc/)
* This file is part of arduino-create-agent-js-client.
* Copyright (c) 2018
* Authors: Alberto Iannaccone, Stefania Mellai, Gabriele Destefanis
*
* This software is released under:
* The GNU General Public License, which covers the main part of
* arduino-create-agent-js-client
* The terms of this license can be found at:
* https://www.gnu.org/licenses/gpl-3.0.en.html
*
* You can be released from the requirements of the above licenses by purchasing
* a commercial license. Buying such a license is mandatory if you want to modify or
* otherwise use the software for commercial activities involving the Arduino
* software without disclosing the source code of your own applications. To purchase
* a commercial license, send an email to license@arduino.cc.
*
*/
/**
 * WARNING: the WebSerialDaemon with support for the Web Serial API is still in an alpha version.
 * At the moment it doesn't implement all the features available in the Chrome App Deamon
 * Use at your own risk.
 *
 * The `channel` parameter in the constructor is the component which is
 * used to interact with the Web Serial API.
 *
 * It must provide a `postMessage` method, similarly to the object created with `chrome.runtime.connect` in
 * the `chrome-app-daemon.js` module, which is used to send messages to interact with the Web Serial API.
 */
var WebSerialDaemon = exports["default"] = /*#__PURE__*/function (_Daemon) {
  _inherits(WebSerialDaemon, _Daemon);
  function WebSerialDaemon(boardsUrl, channel) {
    var _this;
    _classCallCheck(this, WebSerialDaemon);
    _this = _callSuper(this, WebSerialDaemon, [boardsUrl]);
    _this.port = null;
    _this.channelOpenStatus.next(true);
    _this.channel = channel; // channel is injected from the client app
    _this.connectedPorts = [];
    _this.init();
    return _this;
  }
  _createClass(WebSerialDaemon, [{
    key: "init",
    value: function init() {
      var _this2 = this;
      this.agentFound.pipe((0, _operators.distinctUntilChanged)()).subscribe(function (found) {
        if (!found) {
          // Set channelOpen false for the first time
          if (_this2.channelOpen.getValue() === null) {
            _this2.channelOpen.next(false);
          }
          _this2.connectToChannel();
        } else {
          _this2.openChannel(function () {
            return _this2.channel.postMessage({
              command: 'listPorts'
            });
          });
        }
      });
    }
  }, {
    key: "connectToChannel",
    value: function connectToChannel() {
      var _this3 = this;
      this.channel.onMessage(function (message) {
        if (message.version) {
          _this3.agentInfo = {
            version: message.version,
            os: 'ChromeOS'
          };
          _this3.agentFound.next(true);
          _this3.channelOpen.next(true);
        } else {
          _this3.appMessages.next(message);
        }
      });
      this.channel.onDisconnect(function () {
        _this3.channelOpen.next(false);
        _this3.agentFound.next(false);
      });
    }
  }, {
    key: "handleAppMessage",
    value: function handleAppMessage(message) {
      if (message.ports) {
        this.handleListMessage(message);
      } else if (message.supportedBoards) {
        this.supportedBoards.next(message.supportedBoards);
      }
      if (message.serialData) {
        this.serialMonitorMessages.next(message.serialData);
      }
      if (message.uploadStatus) {
        this.handleUploadMessage(message);
      }
      if (message.err) {
        this.uploading.next({
          status: this.UPLOAD_ERROR,
          err: message.Err
        });
      }
    }
  }, {
    key: "handleUploadMessage",
    value: function handleUploadMessage(message) {
      if (this.uploading.getValue().status !== this.UPLOAD_IN_PROGRESS) {
        return;
      }
      switch (message.uploadStatus) {
        case 'message':
          this.uploading.next({
            status: this.UPLOAD_IN_PROGRESS,
            msg: message.message,
            operation: message.operation,
            port: message.port
          });
          break;
        case 'error':
          this.uploading.next({
            status: this.UPLOAD_ERROR,
            err: message.message
          });
          break;
        case 'success':
          this.uploading.next({
            status: this.UPLOAD_DONE,
            msg: message.message,
            operation: message.operation,
            port: message.port
          });
          break;
        default:
          this.uploading.next({
            status: this.UPLOAD_IN_PROGRESS
          });
      }
    }
  }, {
    key: "handleListMessage",
    value: function handleListMessage(message) {
      var lastDevices = this.devicesList.getValue();
      if (!_daemon["default"].devicesListAreEquals(lastDevices.serial, message.ports)) {
        this.devicesList.next({
          serial: message.ports.map(function (port) {
            return {
              Name: port.name,
              SerialNumber: port.serialNumber,
              IsOpen: port.isOpen,
              VendorID: port.vendorId,
              ProductID: port.productId
            };
          }),
          network: []
        });
      }
    }

    /**
     * Send 'close' command to all the available serial ports
     */
  }, {
    key: "closeAllPorts",
    value: function closeAllPorts() {
      var _this4 = this;
      var devices = this.devicesList.getValue().serial;
      if (Array.isArray(devices)) {
        devices.forEach(function (device) {
          _this4.channel.postMessage({
            command: 'closePort',
            data: {
              name: device.Name
            }
          });
        });
      }
    }

    /**
     * Send the 'writePort' message to the serial port
     * @param {string} port the port name
     * @param {string} message the text to be sent to serial
     */
  }, {
    key: "writeSerial",
    value: function writeSerial(port, message) {
      this.channel.postMessage({
        command: 'writePort',
        data: {
          name: port,
          data: message
        }
      });
    }

    /**
     * Request serial port open
     * @param {string} port the port name
     */
  }, {
    key: "openSerialMonitor",
    value: function openSerialMonitor(port, baudrate) {
      var _this5 = this;
      if (this.serialMonitorOpened.getValue()) {
        return;
      }
      var serialPort = this.devicesList.getValue().serial.find(function (p) {
        return p.Name === port;
      });
      if (!serialPort) {
        return this.serialMonitorError.next("Can't find port ".concat(port));
      }
      this.appMessages.pipe((0, _operators.takeUntil)(this.serialMonitorOpened.pipe((0, _operators.filter)(function (open) {
        return open;
      })))).subscribe(function (message) {
        if (message.portOpenStatus === 'success') {
          _this5.serialMonitorOpened.next(true);
        }
        if (message.portOpenStatus === 'error') {
          _this5.serialMonitorError.next("Failed to open serial ".concat(port));
        }
      });
      this.channel.postMessage({
        command: 'openPort',
        data: {
          name: port,
          baudrate: baudrate
        }
      });
    }
  }, {
    key: "closeSerialMonitor",
    value: function closeSerialMonitor(port) {
      var _this6 = this;
      if (!this.serialMonitorOpened.getValue()) {
        return;
      }
      var serialPort = this.devicesList.getValue().serial.find(function (p) {
        return p.Name === port;
      });
      if (!serialPort) {
        return this.serialMonitorError.next("Can't find port ".concat(port));
      }
      this.appMessages.pipe((0, _operators.takeUntil)(this.serialMonitorOpened.pipe((0, _operators.filter)(function (open) {
        return !open;
      })))).subscribe(function (message) {
        if (message.portCloseStatus === 'success') {
          _this6.serialMonitorOpened.next(false);
        }
        if (message.portCloseStatus === 'error') {
          _this6.serialMonitorError.next("Failed to close serial ".concat(port));
        }
      });
      this.channel.postMessage({
        command: 'closePort',
        data: {
          name: port
        }
      });
    }
  }, {
    key: "connectToSerialDevice",
    value: function connectToSerialDevice(_ref) {
      var from = _ref.from,
        dialogCustomization = _ref.dialogCustomization;
      this.channel.postMessage({
        command: 'connectToSerial',
        data: {
          from: from,
          dialogCustomization: dialogCustomization
        }
      });
    }

    /**
     * @param {object} uploadPayload
     * TODO: document param's shape
     */
  }, {
    key: "_upload",
    value: function _upload(uploadPayload, uploadCommandInfo) {
      var _this7 = this;
      var board = uploadPayload.board,
        port = uploadPayload.port,
        commandline = uploadPayload.commandline,
        data = uploadPayload.data,
        pid = uploadPayload.pid,
        vid = uploadPayload.vid,
        filename = uploadPayload.filename,
        dialogCustomizations = uploadPayload.dialogCustomizations;
      var extrafiles = uploadCommandInfo && uploadCommandInfo.files && Array.isArray(uploadCommandInfo.files) ? uploadCommandInfo.files : [];
      try {
        window.oauth.getAccessToken().then(function (token) {
          _this7.channel.postMessage({
            command: 'upload',
            data: {
              board: board,
              port: port,
              commandline: commandline,
              data: data,
              token: token.token,
              extrafiles: extrafiles,
              pid: pid,
              vid: vid,
              filename: filename,
              dialogCustomizations: dialogCustomizations
            }
          });
        });
      } catch (err) {
        this.uploading.next({
          status: this.UPLOAD_ERROR,
          err: 'you need to be logged in on a Create site to upload by Chrome App'
        });
      }
    }
  }]);
  return WebSerialDaemon;
}(_daemon["default"]);