"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var SocketDaemonV2 = exports["default"] = /*#__PURE__*/function () {
  function SocketDaemonV2(daemonURL) {
    _classCallCheck(this, SocketDaemonV2);
    this.daemonURL = "".concat(daemonURL, "/v2");
  }

  // init tries an HEAD
  _createClass(SocketDaemonV2, [{
    key: "init",
    value: function init() {
      return fetch("".concat(this.daemonURL, "/pkgs/tools/installed"), {
        method: 'HEAD'
      }).then(function (res) {
        if (res.status !== 200) {
          throw Error('v2 not available');
        }
        return res;
      });
    }

    // installedTools uses the new v2 apis to ask the daemon a list of the tools already present in the system
  }, {
    key: "installedTools",
    value: function installedTools() {
      return fetch("".concat(this.daemonURL, "/pkgs/tools/installed"), {
        method: 'GET'
      }).then(function (res) {
        return res.json();
      });
    }

    // installTool uses the new v2 apis to ask the daemon to download a specific tool on the system
    // The expected payload is
    // {
    //   "name": "avrdude",
    //   "version": "6.3.0-arduino9",
    //   "packager": "arduino",
    //   "url": "https://downloads.arduino.cc/...", // system-specific package containing the tool
    //   "signature": "e7Gh8309...",  // proof that the url comes from a trusted source
    //   "checksum": "SHA256:90384nhfoso8..." // proof that the package wasn't tampered with
    // }
  }, {
    key: "installTool",
    value: function installTool(payload) {
      return fetch("".concat(this.daemonURL, "/pkgs/tools/installed"), {
        method: 'POST',
        body: JSON.stringify(payload)
      }).then(function (res) {
        return res.json().then(function (json) {
          if (!res.ok) {
            var error = _objectSpread(_objectSpread({}, json), {}, {
              status: res.status,
              statusText: res.statusText
            });
            return Promise.reject(error);
          }
          return json;
        });
      });
    }
  }]);
  return SocketDaemonV2;
}();